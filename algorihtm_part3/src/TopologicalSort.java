/**
 * 위상 정렬 (Topological Sort)
 * 정점들을 위상에 맞춰 정렬하는 것
 *
 * cf> Directed Acyclic Graph (DAG)
 * 방향성이 있는 사이클이 없는 정점 + 간선으로 이루어진 그래프
 *
 * 차수란 ) 정점에 연결된 간선의 갯수
 * 방향성이 있는 그래프에서는?
 * Indegree / Outdegree : 본인을 기준으로 각각 들어오는 / 나오는 간선의 갯수
 *
 * => 방향그래프에 존재하는 각 정점들의 수행 순서를 위배하지 않으면서 모든 정점을 나열하는 것
 *      그래서 이 그래프는 DAG 그래프여야 합니다.
 *
 * 아이디어
 * 1. 제일 먼저 올 수 있는 정점은??
 *      들어오는 간선이 없는 정점들을 택한다!
 *      즉 처음 후보 정점을 자료구조안에 넣는다.
 *
 * 2. 위상 정렬을 시작한다 ver.1
 *      후보들의 정점을 하나 위상 정렬에 넣습니다.
 *      그리고 그 정점과 관련된 간선을 모두 뺐을 때
 *      다시 들어오는 간선이 없는 정점을 후보 자료구조안에 넣는다.
 *
 * 구현
 * 정점들의 indegree값을 계산한다.
 * 간선을 입력받으면서 각각 해줍니다.
 *
 * 정점 후보들을 뒤에 추가해줘, 앞에서 하나 뽑아와줘
 * --> Queue를 이용하면 가장 적합하겠다.
 *
 * 큐(후보 정점들)가 빌 때 까지 반복문 반복
 * --> 정렬하고, 제가한다
 *     새로운 정렬 가능한 점을 찾아서 큐에 넣는다.
 * x가 사라지면 그에 관련된 간선들도 사라진다.
 * 즉 x 다음으로 오는 애들의 값의 indegree 값을 하나씩 감소시켜주어야 합니다.
 * 그 후 만약 다음 정점의 indegree가 0이 되면 큐에 넣어줍니다.
 *
 * 백준 2252
 * 인접 리스트를 이용해서 본다.
 *
 * 2623 9470 14676
 *
 * 백준 1005
 *
 * 1516 2056 2637
 * */
public class TopologicalSort {
}
