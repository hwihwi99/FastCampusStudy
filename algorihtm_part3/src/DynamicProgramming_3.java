/**
 * 동적 프로그래밍 방법
 * 1. 가짜 문제 정의하기 (마지막 상태에 대한 값 정보도 있어야 합니다)
 *      유형 5가지
 *          - 문제 크기 N을 변수로 만들어서 표기하는 경우 (part 1)
 *          - 문제 크기 N과 마지막 상태를 함꼐 기록해줘야 하는 경우 (part 2)
 *          - 구간 L~R 에 대한 문제를 해결할 때 (part 3 중요)
 *          - 2차원 격자 배열에서 문제를 해결할 때 (part 3 )
 *          - 트리 구조에서 문제를 해결할 때 (part 3 중요)
 * 2. 가짜 문제로 진짜 문제를 정할 수 있는지 확인하기
 * 3. 초기값 설정하기
 * 4. 점화식 구하기
 * 5. 답 구하기
 *
 * 11066 _ 파일 합치기
 *
 * 완전 탐색을 해야한다고 생각하면.. 파일 수가 너무 많아지면 감당이 안되기 시작한다.
 * => 동적 프로그래밍 접근일까..??
 *
 * 1) 가짜 문제를 정의하자.
 *      dy[i][j] => i번 ~ j번 파일을 하나로 합치는 최소 비용
 * 2) 가짜 문제를 풀면 진짜 문제를 풀 수 있는가?
 *      dy[1][k] 에 있는 값이 답이다.
 * 3) 초가값 설정하기
 *      i와 j가 같다면.. 파일 크기가 같다면 합쳐지지 않으므로 가격이 0원이 된다.
 * 4) dy[i][j] 계산에 필요한 탐색 경우를 공톰점끼리 묶어 내기
 *      dy[1][4]
 *
 *      ((12) 3) 4  => (1~3)(4~4)
 *      (1 (23)) 4 => (1~3)(4~4)
 *
 *      12 34 => (1~2)(3~4)
 *
 *      1 ((23) 4) => (1~1)(2~4)
 *      1 (2 (34)) => (1~1)(2~4)
 *
 *      끝이 같은 애들끼리 묶어보자!
 *
 *      => 점화식 구해내기
 *      dy[i][j] = min k {dy[i][k] + dy[k+1][j] + (i~j 파일 총량량)}
 *
 * ---------------------------------------------------------------------------
 * 2021.08.24 강의는....듣다가 포기...너무 어렵다...공부 더 해보고 다시 듣기...
 * ----------------------------------------------------------------------------
 **/


public class DynamicProgramming_3 {
}
