/*
* 그래프란?
* 그래프는 정점(Vertex) 또는 노드(Node)와 간선(Edge)로 표현하기 위해 사용
*
* 예로 가장 짧은 길찾기하는 경우 그래프라는 자료구조를 많이 쓴다.
*
* 그래프의 용어
* 노드 : 위치, 정점이라고도 한다.
* 간선 : 위치 간의 관계를 표시한 선으로 노드를 연결한 선
* 인근 정점 (Adjacent Vertex): 간선으로 연결된 정점
* 정점의 차수 (degree): 무방향 그래프에서 하나의 정점에 인접한 정점의 수
* 진입 차수 (in-degree): 방향 그래프에서 외부에서 오는 간선의 수
* 진출 차수 (out-degree): 방향 그래프에서 외부로 나가는 간선의 수
* 경로 길이 (path length): 경로를 구성하기 위해 사용된 간선의 수
* 단순 경로 (simple path): 처음 정점과 끝 정점을 제외하고 중복된 정점이 없는 경로
* 사이클 (cycle): 단순 경로와 시작 정점과 종료 정점이 동일한 경우
*
* 그래프의 종류
* 무방향 그래프 vs 방향 그래프
* 무방향 그래프 : A와 B가 연결되어 있다? (A,B) == (B,A) 같은 표현
* 방향 그래프 : A->B == <A,B> B->A == <B,A>
*
* 가중치 그래프 -> 최단 거리를 구할 때 사용한다.
* 간선에 비용 또는 가중치가 할당되어 있는 그래프
*
* 연결 그래프 vs 비연결 그래프
* 연결 그래프 : 무방향 그래프에 있는 모든 노드에 대해 항상 경로가 존재
* 비연결 그래프 : 무반향 그래프에서 특정 노드에 대해 경로가 존재하지 않는 경우
*
* 사이클 vs 비순환 그래프
* 사이클 : 단순 경로의 시작 노드와 종료 노드가 동일한 경우
* 비순환 그래프 : 사이클이 없는 그래프
*
* 완전 그래프
* 모든 노드가 서로 연결되어 있는 그래프
*
* 그래프 vs 트리
* 트리
* 그래프인데, 방향성이 있고 비순환 그래프, 오직 방향 그래프!!
* 사이클이 존재하지 않는다
* 루트노드가 존재하고, 부모 자식 개념이 존재한다.
*
* 그래프
* 노드와 노드를 연결하는 간선으로 표현되는 자료구조
* 루트노드가 없고, 부모 자식 개념이 존재하지 않는다.
*/
public class Graph {
}
